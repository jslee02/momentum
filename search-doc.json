[{"title":"Style Guide","type":0,"sectionRef":"#","url":"/momentum/docs/developer_guide/style_guide","content":"","keywords":"","version":"Next"},{"title":"Error Handling​","type":1,"pageTitle":"Style Guide","url":"/momentum/docs/developer_guide/style_guide#error-handling","content":" Momentum uses exceptions for handling unrecoverable errors, which is essential for a lower-level library like this. Throwing exceptions allows error detection mechanisms to have visibility into these errors and prevents silent failures, which may lead to more severe bugs. By choosing exceptions as the primary method for error handling in Momentum, we ensure that unrecoverable errors are easily detectable, and the Momentum library remains user-friendly for developers interacting with the application layer.  Using exceptions is especially crucial when considering the application layer as the user of the Momentum library. For layers closer to the services, everything should be surrounded by try-catch blocks to prevent server crashes while still providing valuable error information. Python programmers, who often interact with the application layer, typically expect exceptions, making it a more reasonable approach for error handling in Momentum.  One important caution is to avoid using exceptions for flow control; common errors, such as &quot;L2 norm is too high,&quot; should not result in exceptions being thrown.  ","version":"Next","tagName":"h2"},{"title":"Alternative Approaches​","type":1,"pageTitle":"Style Guide","url":"/momentum/docs/developer_guide/style_guide#alternative-approaches","content":" std::options​  While optional types can be acceptable in some cases, they can lead to the loss of error information, which is not ideal for the application layer. We use optional types for inputs that can be missing for a few frames due to reasons such as lost tracking, but in these cases, the specific reason is not critical.  folly::Expected​  Folly::Expected acts like an optional type but allows for an error type to be specified (see documentation here). This can be useful in some APIs, particularly if error codes need to be serialized or for other similar purposes. In general, folly::Expected is preferred over std::optional.  ","version":"Next","tagName":"h3"},{"title":"Array Access​","type":1,"pageTitle":"Style Guide","url":"/momentum/docs/developer_guide/style_guide#array-access","content":" When accessing elements within arrays, the Momentum codebase employs two methods: the .at() method and the [] operator. The choice between these two methods should be made based on the considerations of performance, safety, and the intended audience of the code:  It is recommended to use the [] operator for code that is self-contained and developed by the Momentum team, especially for low-level and performance-critical code. The [] operator does not perform bounds checking, thus offering better performance. Conversely, the .at() method should be considered for areas of code that might be accessed by the user as it performs bounds checking to prevent out-of-range errors, enhancing the safety of the code.  ","version":"Next","tagName":"h3"},{"title":"Design Decisions​","type":1,"pageTitle":"Style Guide","url":"/momentum/docs/developer_guide/style_guide#design-decisions","content":" ","version":"Next","tagName":"h2"},{"title":"Prefer gsl::span over typed container like `std::vector`` as function argument​","type":1,"pageTitle":"Style Guide","url":"/momentum/docs/developer_guide/style_guide#prefer-gslspan-over-typed-container-like-stdvector-as-function-argument","content":" Using std::vector&lt;T&gt; as a function argument requires the call site to create an std::vector&lt;T&gt; instance even when the data is already stored in a compatible memory layout, such as contiguous memory. By switching to gsl::span&lt;T&gt;, call sites can avoid creating an additional std::vector&lt;T&gt; object and benefit from improved performance by not requiring an unnecessary data copy. ","version":"Next","tagName":"h3"},{"title":"Development Environment","type":0,"sectionRef":"#","url":"/momentum/docs/developer_guide/development_environment","content":"","keywords":"","version":"Next"},{"title":"Supported Environments​","type":1,"pageTitle":"Development Environment","url":"/momentum/docs/developer_guide/development_environment#supported-environments","content":" OS: Windows, Linux, macOS  ","version":"Next","tagName":"h2"},{"title":"Package Manager​","type":1,"pageTitle":"Development Environment","url":"/momentum/docs/developer_guide/development_environment#package-manager","content":" Before developing Momentum, it is necessary to install various dependencies. This process can be platform-dependent and tedious. To simplify this, Momentum utilizes Pixi.  Pixi facilitates building Momentum in a virtual environment across different platforms (Windows, macOS Intel/ARM, Linux) using consistent command lines.  For those interested, you can examine the pixi.toml file to see how dependencies are specified and to explore the available Pixi tasks for Momentum.  info If you choose not to use Pixi, you will need to manually install all dependencies using platform-specific package managers. These typically install dependencies into the system directory. Ensure you have the appropriate package managers installed for your OS: Homebrew for macOS, Vcpkg for Windows, and apt for Ubuntu/Debian. After installation, refer to pixi.toml for guidance on what and how to install.  ","version":"Next","tagName":"h2"},{"title":"Running Custom Commands in Shell​","type":1,"pageTitle":"Development Environment","url":"/momentum/docs/developer_guide/development_environment#running-custom-commands-in-shell","content":" To execute additional commands in the virtual environment other than the predefined tasks (to see the full tasks: pixi task list), such as using CMake directly or running an executable, activate the virtual environment with:  pixi shell   To exit the virtual environment, simply run:  exit   ","version":"Next","tagName":"h2"},{"title":"Developing with Microsoft Visual Studio (Windows Only)​","type":1,"pageTitle":"Development Environment","url":"/momentum/docs/developer_guide/development_environment#developing-with-microsoft-visual-studio-windows-only","content":" To open the project in Visual Studio 2022, use the command:  pixi run open_vs  ","version":"Next","tagName":"h3"},{"title":"Process Markers","type":0,"sectionRef":"#","url":"/momentum/docs/examples/process_markers","content":"","keywords":"","version":"Next"},{"title":"Optical Marker based Body Tracking​","type":1,"pageTitle":"Process Markers","url":"/momentum/docs/examples/process_markers#optical-marker-based-body-tracking","content":" This project provides a set of core functions to solve for body motions based on optical marker inputs. It supports all PC OSes (untested on mobile). The marker_tracker lib contains core functionalities for downstream applications to build on. Demo applications are provided to show how they can be used to build your data processing pipeline. process_markers_app solves for body motion given an input marker sequence, with or without an existing calibrated skeleton. refine_motion runs smoothing as a post process to fill in missing data from input. They can be used to batch process mocap data in a python script.  info The Momentum ecosystem implicitly operates in centimeter. If you are working with c3d files, we will do the unit conversion based on the stored unit on file. However, if you are using our API with your own data, make sure to convert them into cm. We also assume a Y-up coordinate system, which is not the industry convention (i.e., Z-up).  ","version":"Next","tagName":"h2"},{"title":"Example use cases​","type":1,"pageTitle":"Process Markers","url":"/momentum/docs/examples/process_markers#example-use-cases","content":" Get the full list of options for each application with -h or --help argument. 02_01.c3d is an example input file used by the default config files. Note that a config file can be used together with command line options. The command line overwrites values in the config file.  ","version":"Next","tagName":"h2"},{"title":"Track a marker sequence without a calibrated model.​","type":1,"pageTitle":"Process Markers","url":"/momentum/docs/examples/process_markers#track-a-marker-sequence-without-a-calibrated-model","content":" The first step in tracking a marker file is to calibrate the subject's proportions and the markers' placement. It requires a .locators file that defines a template of marker layout on the body. We have a template file with common layouts from Vicon and OptiTrack. There is usually a Range-of-Motion (ROM) sequence captured for this calibration purpose.  Use a config file:    pixi run process_markers -c process_markers_calib.config   Setting the calibrate option to true will first calibrate the skeleton and the marker layout, then use the calibrated model for motion tracking.    ","version":"Next","tagName":"h2"},{"title":"Track a marker sequence with a calibrated model.​","type":1,"pageTitle":"Process Markers","url":"/momentum/docs/examples/process_markers#track-a-marker-sequence-with-a-calibrated-model","content":" The tracking result from the above calibration step contains the calibrated model, and it can then be used to track other motion data from the same subject, without running the calibration step again. We currently only support saving/loading calibrated models in .glb format.  Use a config file:    pixi run process_markers -c process_markers_tracking.config   Use cli arguments:    pixi run process_markers -i input.c3d -o tracked.glb --model calibrated_model.glb --calibrate false  ","version":"Next","tagName":"h2"},{"title":"Convert Model","type":0,"sectionRef":"#","url":"/momentum/docs/examples/convert_model","content":"Convert Model The convert_model example demonstrates how to convert a character model and its associated animation file between FBX and GLB formats. Use the -m or --model option to specify the input model, followed by the path to the model file (.fbx or .glb). If no input model is provided, the tool will automatically read the animation from an existing GLB or FBX file. convert_model [OPTIONS] Options: -h,--help Print this help message and exit -m,--model TEXT:FILE Input model (.fbx/.glb); not required if reading animation from glb or fbx -p,--parameters TEXT:FILE Input model parameter file (.model) -l,--locator TEXT:FILE Input locator file (.locators) -d,--motion TEXT:FILE Input motion data file (.mmo/.glb/.fbx) -o,--out TEXT REQUIRED Output file (.fbx/.glb) --out-locator TEXT Output a locator file (.locators) --save-markers Save marker data from motion file in output (glb only) -c,--character-mesh (FBX Output file only) Saves the Character Mesh to the output file. Example 1: Convert an fbx model to a glb model. pixi run convert_model -m character.fbx -p character.model -l character.locators -o character.glb Example 2: Convert a glb file to an fbx file with animation curves only (without mesh). pixi run convert_model -d animation.glb -o animation.fbx Example 3: Convert an fbx animation to glb with a given model parameter file. There is no guarantee the conversion is lossless. We will simply use InverseParameterTransform for a least square fit of the parameters. pixi run convert_model -d animation.fbx -p character.model -o animation.glb Example 4: Apply animation from an s0 model to a s4 model for high-res rendering (ie. with mesh). The .model file is needed if the target model is in .fbx format so we know how to map the input motion. pixi run convert_model -m character.fbx -p character.model -d animation_s0.glb -o animation_s4.fbx -c ","keywords":"","version":"Next"},{"title":"Viewers","type":0,"sectionRef":"#","url":"/momentum/docs/examples/viewers","content":"","keywords":"","version":"Next"},{"title":"GLB Viewer​","type":1,"pageTitle":"Viewers","url":"/momentum/docs/examples/viewers#glb-viewer","content":" To run the GLB viewer, use the following command:  pixi run glb_viewer --input &lt;my_file.glb&gt;     Source Code  ","version":"Next","tagName":"h2"},{"title":"FBX Viewer​","type":1,"pageTitle":"Viewers","url":"/momentum/docs/examples/viewers#fbx-viewer","content":" To run the FBX viewer, use the following command:  pixi run fbx_viewer --input &lt;my_file.fbx&gt;   Source Code  ","version":"Next","tagName":"h2"},{"title":"C3D Viewer​","type":1,"pageTitle":"Viewers","url":"/momentum/docs/examples/viewers#c3d-viewer","content":" To run the C3D viewer, use the following command:  pixi run c3d_viewer --input &lt;my_file.c3d&gt;   Source Code  ","version":"Next","tagName":"h2"},{"title":"URDF Viewer​","type":1,"pageTitle":"Viewers","url":"/momentum/docs/examples/viewers#urdf-viewer","content":" To run the URDF viewer, use the following command:  pixi run urdf_viewer --input &lt;my_file.urdf&gt;   Source Code  For example, you can download an Atlas robot from this link, which may look like:   ","version":"Next","tagName":"h2"},{"title":"Refine Motion (Post-process noisy tracking motion)","type":0,"sectionRef":"#","url":"/momentum/docs/examples/refine_motion","content":"Refine Motion (Post-process noisy tracking motion) The input marker data may be noisy or contain missing data in a few frames. We can run a smoothing step on the entire sequence to fill in gaps and smooth out noise. Use a config file: pixi run refine_motion -c refine_motion.config Use cli argument to overwrite config values: pixi run refine_motion -c refine_motion.config -i track.glb -o refined.glb --smoothing 2.5 ","keywords":"","version":"Next"},{"title":"Creating Your Applications","type":0,"sectionRef":"#","url":"/momentum/docs/user_guide/creating_your_applications","content":"","keywords":"","version":"Next"},{"title":"Install Momentum​","type":1,"pageTitle":"Creating Your Applications","url":"/momentum/docs/user_guide/creating_your_applications#install-momentum","content":" First, install Momentum in the virtual environment by running:  pixi run install   This command builds (in Release mode) and installs Momentum to .pixi/envs/default/{include,lib,share}/ (Windows may have slightly different path). The necessary environment variables are set so that CMake can find Momentum (and other dependencies) using the environment variables in the virtual environment.  ","version":"Next","tagName":"h2"},{"title":"Writing Source Code​","type":1,"pageTitle":"Creating Your Applications","url":"/momentum/docs/user_guide/creating_your_applications#writing-source-code","content":" Create a new file named main.cpp in your project root with the following content:  #include &lt;momentum/math/mesh.h&gt; using namespace momentum; int main() { auto mesh = Mesh(); mesh.updateNormals(); return EXIT_SUCCESS; }   ","version":"Next","tagName":"h2"},{"title":"Writing CMake Script​","type":1,"pageTitle":"Creating Your Applications","url":"/momentum/docs/user_guide/creating_your_applications#writing-cmake-script","content":" Create a CMakeLists.txt file in the same directory as main.cpp.  To add momentum to your CMake project, first find the momentum package using thefind_package function and then add the appropriate momentum::&lt;target&gt; as a dependency to your library or executable. For example, if you want to use the character functionality from momentum, you would add momentum::character as a dependency:  cmake_minimum_required(VERSION 3.16.3) project(momentum) find_package(momentum CONFIG REQUIRED) add_executable(hello_world main.cpp) target_link_libraries(hello_world PRIVATE momentum::math)   Refer to the example project located at momentum/examples/hello_world/ for the complete source code.  If you are developing a library that depends on Momentum:  add_library(my_lib SHARED my_lib.hpp my_lib.cpp) # shared add_library(my_lib STATIC my_lib.hpp my_lib.cpp) # static target_link_libraries(my_lib PUBLIC momentum::math)   ","version":"Next","tagName":"h2"},{"title":"Building using CMake​","type":1,"pageTitle":"Creating Your Applications","url":"/momentum/docs/user_guide/creating_your_applications#building-using-cmake","content":" Assuming your project directory now contains:  &lt;root&gt; - CMakeLists.txt - main.cpp   For convenience, we assume that your project root is located at momentum/examples/hello_world/ because this code example is provided in that directory. You can use this working example as a reference, but feel free to adjust the path according to your actual project root.  Here, we assume you are not using Pixi to build your project, but you are still within the Pixi environment for managing dependencies.  To run any command in the virtual environment, use:  pixi run &lt;command&gt;   Run the native CMake commands in the virtual environment as follows:  To configure the application, run:  # Linux and macOS pixi run cmake -S momentum/examples/hello_world -B momentum/examples/hello_world/build -DCMAKE_BUILD_TYPE=Release # Windows pixi run cmake -S momentum/examples/hello_world -B momentum/examples/hello_world/build   To build the application, run:  # Linux and macOS pixi run cmake --build momentum/examples/hello_world/build # Windows pixi run cmake --build momentum/examples/hello_world/build --config Release   ","version":"Next","tagName":"h2"},{"title":"Run the Application​","type":1,"pageTitle":"Creating Your Applications","url":"/momentum/docs/user_guide/creating_your_applications#run-the-application","content":" Execute the application with:  # Linux and macOS ./momentum/examples/hello_world/build/hello_world # Windows momentum/examples/hello_world/build/Release/hello_world.exe   ","version":"Next","tagName":"h2"},{"title":"Configuring Your Project with Pixi​","type":1,"pageTitle":"Creating Your Applications","url":"/momentum/docs/user_guide/creating_your_applications#configuring-your-project-with-pixi","content":" If you wish to use Pixi for your project similar to how it's implemented in Momentum, please visit this website for detailed instructions. ","version":"Next","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/momentum/docs/user_guide/getting_started","content":"","keywords":"","version":"Next"},{"title":"Installing Momentum and PyMomentum​","type":1,"pageTitle":"Getting Started","url":"/momentum/docs/user_guide/getting_started#installing-momentum-and-pymomentum","content":" Momentum binary builds are available for Windows, macOS, and Linux via Pixi or the Conda package manager.  For Windows, please install Visual Studio 2022 or greater.  ","version":"Next","tagName":"h2"},{"title":"Pixi​","type":1,"pageTitle":"Getting Started","url":"/momentum/docs/user_guide/getting_started#pixi","content":" # Momentum (C++) pixi add momentum-cpp # PyMomentum (Python) pixi add pymomentum # Both pixi add momentum   ","version":"Next","tagName":"h3"},{"title":"Conda​","type":1,"pageTitle":"Getting Started","url":"/momentum/docs/user_guide/getting_started#conda","content":" conda install -c conda-forge momentum-cpp conda install -c conda-forge pymomentum # Windows is not supported yet conda install -c conda-forge momentum   ","version":"Next","tagName":"h3"},{"title":"Building Momentum from Source​","type":1,"pageTitle":"Getting Started","url":"/momentum/docs/user_guide/getting_started#building-momentum-from-source","content":" ","version":"Next","tagName":"h2"},{"title":"Prerequisite​","type":1,"pageTitle":"Getting Started","url":"/momentum/docs/user_guide/getting_started#prerequisite","content":" Complete the following steps only once:  Install Pixi by following the instructions on https://prefix.dev/ Clone the repository and navigate to the root directory: git clone https://github.com/facebookresearch/momentum cd momentum Ensure that all subsequent commands are executed in the project's root directory unless specified otherwise.  ","version":"Next","tagName":"h3"},{"title":"Build and Test​","type":1,"pageTitle":"Getting Started","url":"/momentum/docs/user_guide/getting_started#build-and-test","content":" Build the project with the following command (note that the first run may take a few minutes as it installs all dependencies): pixi run build Run the tests with: pixi run test   To view all available command lines, run pixi task list.  ","version":"Next","tagName":"h3"},{"title":"Hello World Example​","type":1,"pageTitle":"Getting Started","url":"/momentum/docs/user_guide/getting_started#hello-world-example","content":" To run the hello_world example:  pixi run hello_world   Alternatively, you can directly run the executable:  # Linux and macOS ./build/hello_world # Windows ./build/Release/hello_world.exe   ","version":"Next","tagName":"h3"},{"title":"Running Other Examples​","type":1,"pageTitle":"Getting Started","url":"/momentum/docs/user_guide/getting_started#running-other-examples","content":" To run other examples:  pixi run glb_viewer --help   For more examples, please refer to the Examples page.  ","version":"Next","tagName":"h3"},{"title":"Clean Up​","type":1,"pageTitle":"Getting Started","url":"/momentum/docs/user_guide/getting_started#clean-up","content":" If you need to start over for any reason:  pixi run clean   Momentum uses the build/ directory for CMake builds, and .pixi/ for the Pixi virtual environment. You can clean up everything by either manually removing these directories or by running the command above.  ","version":"Next","tagName":"h3"},{"title":"FBX Support​","type":1,"pageTitle":"Getting Started","url":"/momentum/docs/user_guide/getting_started#fbx-support","content":" Momentum uses OpenFBX to load Autodesk's FBX file format, which is enabled by default. To save files in FBX format, you must install the FBX SDK 2020.3.  Linux​  The FBX SDK will be automatically installed when you run pixi run config, so no additional steps are required.  macOS and Windows​  You can download it from Autodesk's website or use direct links (macOS, Windows). After installing the SDK, build Momentum from source with MOMENTUM_BUILD_WITH_FBXSDK=ON option as:  # macOS MOMENTUM_BUILD_WITH_FBXSDK=ON pixi run &lt;target&gt; # Windows (Powershell) $env:MOMENTUM_BUILD_WITH_FBXSDK = &quot;ON&quot;; pixi run &lt;target&gt; # Windows (cmd) set MOMENTUM_BUILD_WITH_FBXSDK=ON &amp;&amp; pixi run &lt;target&gt;   For example, file conversion can be run as follows:  # Windows (Powershell) $env:MOMENTUM_BUILD_WITH_FBXSDK = &quot;ON&quot;; pixi run convert_model -d &lt;input.glb&gt; -o &lt;out.fbx&gt;  ","version":"Next","tagName":"h3"}]